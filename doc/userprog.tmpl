             +--------------------------+
             |          CS 140          |
             | PROJECT 2: USER PROGRAMS |
             |     DESIGN DOCUMENT      |
             +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Eman Samir <eman.samir22.es@gmail.com>
Sara Gaballa <saragaballa2002@gmail.com>
Maria Bassem <maria.college2025@gmail.com>
Mariam Hossam <m.hossam2551@gmail.com>
Nisreen Hisham <nancyhisham2003@gmail.com>
---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

               ARGUMENT PASSING
               ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

                 SYSTEM CALLS
                 ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
    1. struct open_file
    {
        struct list_elem file_elem;
        struct file *file_ptr;
        int fd;
    };
    ==> This struct is used to define an interface for dealing with files 
    The struct has three fields:
        * struct list_elem file_elem: used to add the open_file object to the list of file descriptors 
        for a thread, and to be able to iterate on it.
        * struct file *file_ptr: a pointer to the file in the file system.
            It provides a reference to the file object in the file system, 
            which contains information such as the file's name, size, and location on disk.
            This allows the operating system to perform file operations such as reading and writing data to the file.
        * int fd: the file descriptor number assigned to the open_file.
            It is used to uniquely identify the open file within the process. 
            A new file descriptor number (fd) is assigned to each open file when it is created. 
            This number is used by the process to refer to the file in the operations (read, write, seek, ... etc.).
    2. typedef int pid_t; ==> This is an int return value for the exec, and a parameter of the wait functions. 
        It represents the process pid which is 1-1 mapping with the tid_t.
    3. static struct lock files_sync_lock; ==> This struct is to Synchronize access to the files. 
        We acquire the lock at the beginning of any operation to ensure that no two fds are accessing the file
        simultaneously and then at the end, we release the lock.
    4. In struct thread, we added:
        #ifdef USERPROG
            /* Owned by userprog/process.c. */
            /*userprog data*/
            uint32_t *pagedir;                  /* Page directory. */
            struct thread *parent;              /* Points to the parent that created this thread. */
            tid_t waiting_on;                   /* Represents the tid of the thread that we are waiting on*/
            struct list children;                 /* List of children owned by this thread*/
            int exit_status;                    /* Has the exit status of the thread*/
            int child_status;                   /* Has the exit status of the thread that we are waiting on*/
            bool child_success;                 /* represents the state of the child process*/
            struct list_elem child_elem;        /* List element to be able to iterate through the children list. */
            struct list file_descriptors;      /* List of file descriptors held to this thread. */
            struct semaphore waiting_on_child;  /* Make parent wait on a child process */
            struct semaphore parent_child_sync; /* Synchronize the creation of communication link between parent and child. */
            int fd_count;                     /* count the number of the file descriptors held by this thread. */
        #endif
    ==> for the initialization, we made the exit_status and the child_status = -1.
        The fd_count is the number of file descriptors held by the process. It is initially 2 because it can't be less than that.
        waiting_on is initially -1 because we are not waiting on any child. Parent is NULL.
        The file descriptors list is the list of the file descriptors opened by the porcess.

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

- File descriptors are integers that are returned by the open(const char *file).
    When a file is opened using open, it is assigned the next available file descriptor.
    The first file opened will have fd = 2, the next will have fd = 3, ..etc.
    Each process has an independent set of file descriptors. Thus, fds are unique within a single process.
    File descriptors are not inherited by child processes.

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.
For the read:
    - The function first acquires a lock named files_sync_lock to ensure that
    there is no other thread tries to write to the file while reading it.
    * If the size equal to 0 the lock is realised and 0 is returned as 0 bytes were read. 
    * If fd is equal to 0 it will read the input from the user in c then the function releases
     the lock and returns c.
    * If fd is equal to 1 or the current thread has no open file descriptors the function
      releases the lock. It then returns 0 as there is nothing to be read.
    * If fd is a valid file descriptor, the function searches the list of 
        open file descriptors owned by the thread to find the corresponding struct open_file object. 
        Once it finds the object, it calls the file_read function which is defined in file.c 
        with the file pointer, buffer, and size arguments. It then releases the lock and returns
        the number of bytes read.
For the write:
    -  The function first acquires a lock named files_sync_lock to ensure that
    multiple threads don't write to the same file descriptor at the same time.
    * If fd is equal to 1, the function writes the data to the console using
        the putbuf function and releases the lock. It then returns the number of bytes written.
    * If fd is equal to 0 or the current thread has no open file descriptors, 
        the function releases the lock and returns 0 because nothing was written.
    * If fd is a valid file descriptor, the function searches the list of 
        open file descriptors owned by the thread to find the corresponding struct open_file object. 
        Once it finds the object, it calls the file_write function which is defined in file.c 
        with the file pointer, buffer, and size arguments. It then releases the lock and returns
        the number of bytes written.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

- The wait in syscall calls process_wait which is used by the parent process to wait for the child process 
    to terminate and retrieve child's exit status.
    The function takes child_tid as a parameter to wait for.
    * First, we check if the current thread (parent) has any children to wait for.
        If not, it returns -1.
    * Next, we search the list of children of the parent to find the child process with the given child_tid. 
        If we find the child, we set the child_thread and break from the loop.
        If we finished the loop and the chikd_thread is still equal to NULL, we return -1.
    * We make the parent's waiting_on value equals the child_tid. This is to make the parent process points
        to the child that we will wait on
    * Then the child thread wakes up on the parent_child_sync. This semaphore is used to wake up the 
        child process and signal that its parent is waiting for it.
    * Then we remove the child from the list of children of the current thread, because parent waits for any given child at most once.
    * The parent waits on the waiting_on_child semaphore. This semaphore is used to block the 
        parent process until the child process terminates.
    * When the child process exits in process_exit(), it sema_up the waiting_on_child semaphore to wake up the parent thread. 
    * Finally, the parent process is unblocked and retrieves the child's exit status.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

    By using the semaphore parent_child_sync and the child_success flag, the code ensures
    that the parent process waits for the child process to complete loading before continuing execution.
    Once the child thread is created, the parent performs a "semaphore down" operation, waiting until the 
    child calls "semaphore up" after completing its loading process.
    It also provides a mechanism for the child process to indicate whether the loading was successful or not,
    If the loading process fails, the child's return status is set to an error value (False) before waking up the parent through
    the semaphore operation allowing the exec system call to return the appropriate value (-1 for failure or the child process
     identifier for success).

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?
    In both cases, proper synchronization is achieved between the parent and child processes using
    parent_child_sync semaphore and thread data, ensuring that the parent waits for the child to terminate and retrieves
    the correct exit status without encountering race conditions. 
    * Synchronization when P calls wait(C) before C exits: 
        In this case, the parent process enters the process_wait function and waits on the waiting_on_child
        semaphore using sema_down(&thread_current()->waiting_on_child). 
        The child process C will eventually terminate and signal the parent process by calling sema_up(&child_thread->parent_child_sync). 
        The parent process, being unblocked by the semaphore, continues execution and then retrieves the child's exit status, and returns it. 
    
    * Synchronization when P calls wait(C) after C exits: 
    If the child process C has already exited before the parent process calls wait(C), there is no need for synchronization because the 
    child's termination is already complete. The child process, upon termination, sets the child_status member of the parent thread to its exit status. 
    When the parent process enters the process_wait function and checks the list_empty(&thread_current()->children) condition, it will find that the list
    of children is empty, indicating that the child has already exited. 
    The parent process skips the waiting and directly retrieves the child's exit status from thread_current()->child_status and returns it.
    
    * P terminates before C exits: We wake up all the children of the P by sema_up on the parent_child_sync semaphore


    * P terminates after C exits: {Normal Case}
    If the parent process P terminates after the child process C has already exited, there are no special cases to handle.
    Since the child process C has already terminated, its exit status should have been recorded, and any necessary cleanup should have been performed.




---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?
     Advantages of the design for file descriptors:
        Simplicity: The design uses a list to store open file descriptors associated with a thread. This allows for easy management 
        of file descriptors and simplifies the implementation of system calls related to file operations.


        Scalability: The design allows multiple files to be opened simultaneously by a single thread. Each file descriptor is 
        associated with a unique file, enabling concurrent access to different files.


        Thread safety: The use of a lock (files_sync_lock) ensures that file operations are synchronized and prevent concurrent 
        access to file descriptors, providing thread safety.
    
    Disadvantages of the design for file descriptors:
        Linear search: When performing file operations, the design currently uses a linear search to find the file descriptor in the list. 
        This linear search can become inefficient as the number of open file descriptors increases. 

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

    We didn't change this mapping. The tid_t and the pid_t are 1 to 1 mapped in our implementation.
    * A tid_t identifies a kernel thread, which may have a user process running in it (if created with process_execute()) or not 
    (if created with thread_create()). It is a data type used only in the kernel.
    * A pid_t identifies a user process. It is used by user processes and the kernel in the exec and wait system calls.
    By default, they're both int. We made them one-to-one mapping, so that the same values in both identify the same process.

               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
