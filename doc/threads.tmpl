            +--------------------+
            |        CS 140      |
            | PROJECT 1: THREADS |
            |   DESIGN DOCUMENT  |
            +--------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Eman Samir <eman.samir22.es@gmail.com>
Sara Gaballa <saragaballa2002@gmail.com>
Maria Bassem <maria.college2025@gmail.com>
Mariam Hossam <m.hossam2551@gmail.com>
Nisreen Hisham <nancyhisham2003@gmail.com>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

                 ALARM CLOCK
                 ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

* int64_t wake_time (struct thread): 
            For keeping the ticks count when the thread should wake up if it is sleeping
            
* struct list sleeping_threads:
            A list for storing threads that are put to sleep, sorted ascendingly by wake_time
            
* list_elem sleepelem (struct thread): 
            List element for sleeping threads list


---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

1. The current thread's wake_time is set to the current ticks plus the given sleep ticks.
2. Disable interrupts
3. Insert the thread into sleeping_threads list ordered ascendingly by wake_time
4. Call thread_block() to block the current thread
5. Re-enable interrupts and set it to the old level

In timer interrupt handler:
1. Iterate through sleeping_threads list
2. If any thread's wake_time is smaller than or equal current ticks:
     - Unblock it by invoking thread_unblock() on this thread.
     - Remove it from the sleeping_threads list.
3. If a thread is found whose wake_time is larger than the current ticks:
     - Exit the loop


>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

- The list keeping the sleeping threads is sorted ascendingly by wake_time
  so when timer interrupt is invoked, it checks only first elements of the list
  till the element's wake time is greater than the current ticks. Thus, we avoid
  checking the remaining elements and reduce the time spent by this function.

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

- Interrupts are disabled before inserting threads to the list or blocking them

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

- Current ticks and sleeping ticks are kept in local variables before disabling interrupts,
  so wake_time value is not affected by race conditions.
- All other operations are done when interrupts are disabled.

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

- Keeping the sleeping threads in a list is reasonable to keep track of them and check
  them on each tick.
- This design ensures minimum time spent in interrupt handler since the list is sorted.
- This design avoids race conditions by disabling interrupts before any operation that 
  involves global variables.


             PRIORITY SCHEDULING
             ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

* In struct semaphore:
    - int priority --> holds the priority of the semaphore which is the 
            priority of the waiting thread on that semaphore used in condition
            variables to sema up higher priority semaphores first.
            
* In struct lock:
    1. struct list_elem elem --> List element of the lock for the thread's
            list of locks.
    2. int priority --> holds the priority of the lock which is the 
            highest donated priority of the waiting threads on that lock
            used in multiple donation.

* In struct thread:
    1.  int old_priority --> contains the original priority of thread 
                             before donation.
    2. struct lock *wait_on_lock --> The lock that this thread is waiting for.
            Used in nested donation to find out the next lock in the chain.
    3. struct list locks --> List to keep a reference to the locks acquired 
            by the thread sorted descendingly by the lock's priority. Used 
            to set the thread's priority according to the locks it holds.
            
* In synch.c:
    #define MAX_LEVEL 8 --> Maximum level of nested donation.


>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

To track priority donation:
* For each lock:
    # int priority --> Each lock has its own priority which is the highest prioriy after
            donation of the threads holding or waiting for that lock. Used in multiple donation
            so that the thread holding the lock takes the same priority of the lock.
           
* For each thread:
    # int priority --> Holds the thread's priority after donation.
    # struct lock *wait_on_lock --> The lock that this thread is waiting for.
            Used in nested donation to find out the next lock in the chain.
    # struct list locks --> List to keep a reference to the locks acquired 
            by the thread sorted descendingly by the lock's priority. Used 
            to set the thread's priority according to the locks it holds.
  
 
 priority                                       100                     100                     150 
                                --------------> L1     ---------------> L2     ---------------> L3
                               /                |     /                 |     /                 |             
                              /                 |    /                  |    /                  |
                             /                  |   /                   |   /                   |
                            /                   |  /                    |  /                    |
                           /                    ↓ /                     ↓ /                     ↓
                        T1                      T2                      T3                      T4

old_priority            100                     50                      10                      150         Before donatation
priority                100                     100                     100                     150         After donation
locks                   {}                      {L1}                    {L2}                    {L3}
wait_on_lock            L1                      L2                      L3                      NULL


**T4 releases L3

priority                                       100                     100                     100 
                                --------------> L1     ---------------> L2     <--------------- L3
                               /                |     /                 |     /                              
                              /                 |    /                  |    /                  
                             /                  |   /                   |   /                   
                            /                   |  /                    |  /                    
                           /                    ↓ /                     ↓ ↙                     
                        T1                      T2                      T3                      T4

old_priority            100                     50                      10                      150         Before donatation
priority                100                     100                     100                     150         After donation
locks                   {}                      {L1}                    {L2, L3}                 {}
wait_on_lock            L1                      L2                      NULL                    NULL


**T3 releases L2, L3

priority                                       100                     100                      0 
                                --------------> L1     <--------------- L2                      L3
                               /                |     /                                   
                              /                 |    /                      
                             /                  |   /                      
                            /                   |  /                      
                           /                    ↓ ↙                      
                        T1                      T2                      T3                      T4

old_priority            100                     50                      10                      150         Before donatation
priority                100                     100                     10                      150         After donation
locks                   {}                      {L1, L2}                {}                       {}
wait_on_lock            L1                      NULL                   NULL                     NULL

**T2 releases L1, L2

priority                                       100                      0                      0 
                                <-------------- L1                     L2                      L3
                               /                                                        
                              /                                       
                             /                                        
                            /                                         
                           ↙                                          
                        T1                      T2                      T3                      T4

old_priority            100                     50                      10                      150         Before donatation
priority                100                     50                      10                      150         After donation
locks                   {L1}                    {}                      {}                       {}
wait_on_lock            NULL                    NULL                   NULL                     NULL


---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

  The waiting threads are ordered descendingly based upon their priority
  [which is the donated priority, if there is donation] using 
  the "list_insert_ordered()" function to insert the threads.

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

  1. The current thread priority is compared to the locks' priority
    ==> If the former is greater, the locks' priority is adjusted to be equal 
    to the thread_current's.
    ==> The priority of the lock is donated to the thread holding the lock
    and all the locks that it is waiting on. That is to ensure that the high priority thread 
    is served as soon as possible. [Nested Donation Handling]
  2. The lock is added to the list of locks acquired by the current thread.
     The lock holder becomes the current thread.
     This process needs synchronization to avoid race conditions.

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.
  
  1. The lock->holder attribte is set to NULL.
  2. Remove the lock from the list of locks of the thread.
  3. Now, the virtual priority of the thread is set to be the highest priority of
     the lock it has.
  4. Change the priority of the lock to become the priority of the
     maximum thread waiting on the lock. [So this thread acquires the lock]. 

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

Priority changes in both thread_set_priority() and thread_set_virtual_priority()
during priority donation. Alternating the sequence of both may cause different results.
In addition, multiple locks may try to update thread's donated priority concurrently.

It is avoided by disabling interrupts whenever priority is updated.

A lock can be used on the priority variable of the thread. So all functions writing
to that variable must first acquire the lock.

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?
  1. It is simple because by giving the lock the max priority of the waiting threads, 
    we ensure that the thread that has the lock has high priority so that other high priority 
    threads can operate as soon as possible.
  2. Having two values to store the priority made the work easier, because the virtual 
    priority will be used in case of donation only and so after the donation the original priority 
    will be restored easily. If this process was made using one priority attribute, it would have been  
    difficult to handle.

              ADVANCED SCHEDULER
              ==================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
  1. struct real {
      int val;
    };
    This is to be able to define load_avg, recent_cpu because they are real
    numbers not integers.
  2. In struct thread, we added 
      int nice;
      struct real recent_cpu;
  3. struct real load_avg; ==> This is system-wide, so it is defined globally in thread.c 

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0      0   0   0   63 61  59      A
 4      4   0   0   62 61  59      A                     
 8      8   0   0   61 61  59      B
12      8   4   0   61 60  59      A 
16      12  4   0   60 60  59      B    
20      12  8   0   60 59  59      A
24      16  8   0   59 59  59      C
28      16  8   4   59 59  58      B
32      16  12  4   59 58  58      A
36      20  12  4   58 58  58      C

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?
  
  The decision of which thread to execute when two or more have the same priority
  is unclear. But according to the specification, the scheduler must proceed through
  the threads in a "round robin" fashion if there are many threads with the same priority.
  When a thread yield, it is reinserted after all other threads with
  the same priority in the list of ready threads.



>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

  The timer interrupt handler is where the majority of the scheduling work is completed.
  In theads_ticks, the list that holds the next thread to run is updated in Calculate_priority_all 
  and we recalculate the thread priorities, recent CPU values, and the load_avg.
  Therefore, thread tick() contains the majority of the code.
  The current thread priority is recalculated every fourth tick,
  the system's load average and all threads priorities are recalculated every second. Like that, we 
  try to make the thread_tick as fast and optimal as possible

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?
  

>> C6: The assignment explains arithmetic for fixed-point math in
>> detail, but it leaves it open to you to implement it.  Why did you
>> decide to implement it the way you did?  If you created an
>> abstraction layer for fixed-point math, that is, an abstract data
>> type and/or a set of functions or macros to manipulate fixed-point
>> numbers, why did you do so?  If not, why not?

  In order to make fixed-point representation more readable, 
  a struct with only an int value was employed. The 17.14 fixed-point
  number representation was used to represent real numbers in a 32-bit integer.
  The initial bit is for the sign, the subsequent 17 bits are for the whole-number,
  and the final 14 bits are for the fraction. The maximum value of a number in the 
  17.14 format is (2**31 - 1)/(2**14) = about 131,071.999. Thus, an integer x
  represents the real number x/(2**14). The fixed-point.h file contains definitions
  for real number operations as well as conversions between integer and real and vice versa.

               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
